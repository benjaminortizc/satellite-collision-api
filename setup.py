#!/usr/bin/env python3
"""
Script de configuraci√≥n inicial para Satellite Collision Avoidance API
"""

import os
import sys
import subprocess

def check_python_version():
    """Verificar versi√≥n de Python"""
    if sys.version_info < (3, 8):
        print("‚ùå Error: Se requiere Python 3.8 o superior")
        print(f"   Versi√≥n actual: {sys.version}")
        return False
    print(f"‚úÖ Python {sys.version.split()[0]} - OK")
    return True

def create_env_file():
    """Crear archivo de credenciales si no existe"""
    if os.path.exists('env'):
        print("‚úÖ Archivo 'env' ya existe")
        return True
    
    print("\nüìù Configuraci√≥n de credenciales")
    print("Necesitas credenciales de Space-Track.org")
    print("Reg√≠strate en: https://www.space-track.org/auth/signup")
    
    username = input("Usuario de Space-Track: ").strip()
    password = input("Contrase√±a de Space-Track: ").strip()
    
    if not username or not password:
        print("‚ùå Credenciales no v√°lidas")
        return False
    
    try:
        with open('env', 'w') as f:
            f.write(f"USERNAME={username}\n")
            f.write(f"PASSWORD={password}\n")
        print("‚úÖ Archivo 'env' creado")
        return True
    except Exception as e:
        print(f"‚ùå Error al crear archivo 'env': {e}")
        return False

def install_dependencies():
    """Instalar dependencias de Python"""
    print("\nüì¶ Instalando dependencias...")
    try:
        subprocess.check_call([sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'])
        print("‚úÖ Dependencias instaladas")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error al instalar dependencias: {e}")
        return False

def make_startup_executable():
    """Hacer ejecutable el script de inicio"""
    try:
        os.chmod('startup.sh', 0o755)
        print("‚úÖ Script startup.sh hecho ejecutable")
        return True
    except Exception as e:
        print(f"‚ùå Error al hacer ejecutable startup.sh: {e}")
        return False

def test_imports():
    """Probar importaciones de m√≥dulos"""
    print("\nüß™ Probando importaciones...")
    try:
        import fastapi
        import uvicorn
        import requests
        import pandas
        print("‚úÖ Todas las importaciones exitosas")
        return True
    except ImportError as e:
        print(f"‚ùå Error de importaci√≥n: {e}")
        return False

def main():
    """Funci√≥n principal de configuraci√≥n"""
    print("üöÄ Configuraci√≥n de Satellite Collision Avoidance API")
    print("=" * 60)
    
    # Verificar Python
    if not check_python_version():
        sys.exit(1)
    
    # Crear archivo de credenciales
    if not create_env_file():
        print("\nüí° Puedes crear el archivo 'env' manualmente:")
        print("   USERNAME=tu_usuario")
        print("   PASSWORD=tu_password")
        sys.exit(1)
    
    # Instalar dependencias
    if not install_dependencies():
        sys.exit(1)
    
    # Hacer ejecutable startup.sh
    make_startup_executable()
    
    # Probar importaciones
    if not test_imports():
        sys.exit(1)
    
    print("\n" + "=" * 60)
    print("‚úÖ Configuraci√≥n completada exitosamente!")
    print("\nüìã Pr√≥ximos pasos:")
    print("1. Ejecutar la API: python main.py")
    print("2. Abrir en navegador: http://localhost:8000/docs")
    print("3. Probar endpoints: python test_local.py")
    print("\nüåê Para desplegar en Azure:")
    print("1. Crear App Service en Azure Portal")
    print("2. Configurar startup command: ./startup.sh")
    print("3. Subir c√≥digo via Git o Azure CLI")

if __name__ == "__main__":
    main() 